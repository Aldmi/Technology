Валидация данных на примере доменного типа Customer (корня агрегации).

1. Новые объекты создаются только через фабрику возвращающие Result<T, string>
    T - созданный объект
    string - ошибки
	
	тут же создается класс валидатор CustomerValidator, который отвечает за инвариантность созданного объекта.
	
2. Функции изменяющие домен всегда создаются парно Execute/CanExecute.



using System;
using System.Collections.Generic;
using System.Linq;
using CSharpFunctionalExtensions;
using FluentValidation;
using FluentValidation.Results;
using FluentValidatorTest.Validators;

namespace FluentValidatorTest.Domain
{
    public class Customer : AgregateRoot
    {
        #region prop

        public int Id { get; }
        public string Surname { get; private set; }
        public string Forename { get; private set; }
        public decimal Discount { get; private set; }
        public string Address { get; private set; }

        #endregion



        private Customer(int id, string surname, string forename, decimal discount, string address)
        {
            Id = id;
            Surname = surname;
            Forename = forename;
            Discount = discount;
            Address = address;
        }



        #region Factory

        public static Result<Customer, string> CreateCustomer(int id, string surname, string forename, decimal discount, string address)
        {
            Customer customer = new Customer(id, surname, forename, discount, address);
            CustomerValidator validator = new CustomerValidator();
            var valRes = validator.Validate(customer);
            if (valRes.IsValid)
            {
                return Result.Ok<Customer, string>(customer);
            }
            var errors = valRes.ToString("~");
            return Result.Fail<Customer, string>(errors);
        }

        #endregion



        #region MutableMethods

        public IReadOnlyList<string> CanChangeSurname(string newSurname)
        {
            var validator = new StringNotNullNotEmptyValidator();
            var valRes = validator.Validate(newSurname);
            return valRes.IsValid ? new List<string>() : valRes.Errors as IReadOnlyList<string>;
        }


        public void ChangeSurname(string newSurname)
        {
            if (CanChangeSurname(newSurname).Any())
                throw new InvalidOperationException();

            Surname = newSurname;
        }

        #endregion
    }


    public class CustomerValidator : AbstractValidator<Customer>
    {
        public CustomerValidator()
        {
            RuleFor(x => x.Surname).NotEmpty();
            RuleFor(x => x.Forename).NotEmpty().WithMessage("Please specify a first name");
            RuleFor(x => x.Discount).NotEqual(0);
            RuleFor(x => x.Address).Length(20, 250);
            //RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage("Please specify a valid postcode");
        }
    }
}