          
	    class Customer
        {
            public Customer() { Orders = new List<Order>(); }
            public string CustomerName { get; set; }
            public string Region { get; set; }
            public List<Order> Orders { get; private set; }
        }

        class Order
        {
            public int OrderId { get; set; }
            public DateTimeOffset OrderDate { get; set; }
        }
		
		
		//Наблюдаемая коллекция
		var customers = new ObservableCollection<Customer>();
   
        // Rx обертка над событием CollectionChanged наблюдаемой коллекции
		var customerChanges = Observable.FromEventPattern(
			(EventHandler<NotifyCollectionChangedEventArgs> ev)
				=> new NotifyCollectionChangedEventHandler(ev),
			ev => customers.CollectionChanged += ev,
			ev => customers.CollectionChanged -= ev);

	   // Rx обработка обертки в стиле LINQ (только событие добавления, Customer.Region== "WA")
	   // в итоге получсется Rx событие.
		var watchForNewCustomersFromWashington =
			from c in customerChanges
			where c.EventArgs.Action == NotifyCollectionChangedAction.Add
			from cus in c.EventArgs.NewItems.Cast<Customer>().ToObservable()
			where cus.Region == "WA"
			select cus;

		Console.WriteLine("New customers from Washington and their orders:");

		//Подписка на RX событие 
		watchForNewCustomersFromWashington.Subscribe(cus =>
		{
			Console.WriteLine("Customer {0}:", cus.CustomerName);

			foreach (var order in cus.Orders)
			{
				Console.WriteLine("Order {0}: {1}", order.OrderId, order.OrderDate);
			}
		});

		//При изменении коллекции  сработка события
		customers.Add(new Customer
		{
			CustomerName = "Lazy K Kountry Store",
			Region = "WA",
			Orders = { new Order { OrderDate = DateTimeOffset.Now, OrderId = 1 } }
		});

		Thread.Sleep(1000);
		customers.Add(new Customer
		{
			CustomerName = "Joe's Food Shop",
			Region = "NY",
			Orders = { new Order { OrderDate = DateTimeOffset.Now, OrderId = 2 } }
		});

		Thread.Sleep(1000);
		customers.Add(new Customer
		{
			CustomerName = "Trail's Head Gourmet Provisioners",
			Region = "WA",
			Orders = { new Order { OrderDate = DateTimeOffset.Now, OrderId = 3 } }
		});
