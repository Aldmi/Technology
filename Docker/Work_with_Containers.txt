1. Просто скачать образ с глобальнго репозитория
   docker pull Hello-World
   
2. Создать и запустить контейнер. Image для создания внчале ищется в локальном репозитории, затем в глобальном.
   docker run Hello-World
После создания контейнера из Image. запускается процесс внутри контейнера
Например образ из Dockerfile: ENTRYPOINT ["dotnet", "DockerTest.dll"]
Если процесс завершился, то Docker автоматически останавливает такой контейнер (STATUS = exited).
Если процесс продолжается то контейнер остается запущенным.

Каждый запуск контейнера из Image создает НОВЫЙ контейнер.

У каждого контейнера есть Ip адресс, который присваивается автоматически.
По умолчанию из контейнера есть доступ во внешнюю сеть
можно ввести ping 8.8.8.8 (DNS google)
и получим ответ.

ОПЦИИ:

	-it 
	Подключение консоли к процессу в Docker.
	По умолчанию вывод только ReadOnly из контейнера.
	Поэтому для управления через консоль клиента, нужно подключить терминал 
	docker run -it Hello-World
	
	-d
	Запуск в фоновом режиме
	docker run -d Hello-World
	
	--rm
	авто удаление остановленного контейнера. (По умолчанию остановленный контейнер не удаляется )
	docker run -it --rm Hello-World
	
	-p 
	Маппинг портов
	внешний порт:внутр порт 
	docker run -p 8080:80 Hello-World
	
	-v
	Подключение томов
	docker run -v ${PWD}:/usr/share Hello-World
	${PWD} - путь к текущей папке на клиенте
	/usr/share - путь к папке в контейнере
	Если контейнер создает файлы (например логи), то тогда они пробрасываются на клиента.
	Если клиент создает файл в папке, то файл пробрасывается в контейнер и может заменить лежащий там файл (так можно заменить дефолтную страницу Index.html для выдачи web сервером).
	Пример маппинга папки Logs из AspNetCore контейнера.
	docker run -d --rm -p 8080:80 -v ${PWD}:/app/Logs dockertest
	Пример маппинга appsettings.json из AspNetCore контейнера. appsettings.json ДОЛЖЕН НАХОДИТСЯ В ПАПКЕ НА КЛИЕНТЕ.
	docker run -d -it -p 8080:80 -v ${PWD}/appsettings.json:/app/appsettings.json dockertest
	
3. удалить контейнер
   docker rm {id}
   
4. удалить все оставновленные контейнеры.
   docker container prune
   
5. Детали по контейнеру.
   docker container inspect {id}
   ИНФА:
    *** мапиинг портов - секция "Ports"
	*** ip address внутри контейнера
	*** маппинг томов - секция "Mounts"
	*** скрипт (команда выполненная внутри контейнера) - "Path"
   
6. Останов контейнера
   docker stop {id}
   
7. Выполнить команду в запущенном контейнере (запустить доп. процесс)
   docker exec -it {id} bash
   где bash - название процесса в контейнере.
   Т.е. можно использовать оболочку bash.
   для выхода из bash вводим exit.
   
8. Перенос команд - для удобства ввода в терминале, команды можно переносить на новую строку используя "\"
   docker run \
   - p 8080:80 \
   -d \
   --rm \
   
9. Смотреть логи контейнера (любого запущенного или остановленного)
   docker logs {id}