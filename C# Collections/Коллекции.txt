Инфа из доклада:
https://www.youtube.com/watch?v=wVZhlsYQkf8&ab_channel=DotNetRu

СОВЕТЫ:

*** Если в List много элементов, то создаем список с явным указанаием размера.
    Список при нехватке места на новый элемент, создает новый список (в 2раза большего размера), копирует туда старый список и убивает старый список.
    Если размер списка превысит 85кБайт, то попадаем в кучу больщи объектов (LOH).
	LOH - собирается GC только во 2-ом поколении и не дефрагментируется, что 'дорого'.


*** Dictionary<Tkey,Tval> - внутри 2 массива: массив ключей и массив значений.
    Линейный Поиск в словаре быстрее чем в списке при размерее коллекции БОЛШЕ 50 элементов,
	т.к. элемент в словаре индексируется через ХЭШ функцию на ключе.
	Но для малых коллекций, лутчше использовать списки.
	
	
*** Массивы	КОВАРИАНТНЫ
    Triangle[] tr = ...;
	Shape[] shapes = tr; //можем присвоить массиву базового типа.
	public void DoSomething(Shape[] t)
	{
	  t[0]= new Rectanmgle(); // Код компилится, но в рантайме будет ArrayTypeMismatchException
	}
	Т.е. мы платим за все проверки в рантайме. (сделано это для обратной совместимостью для версий когда не было generic типов).
	
    Ключевые слова in/out:
    intreface IEnumerable<out T>:
	IEnumerable<Circle> GetCircles();
	IEnumerable<Shape> x= GetCircles(); //Возвращаемое значение коллекции производного типа можно присваивать под базовый тип.
	
	delegate Action<in T>:
	void ProcessShapes(Action<Circle> action);
	Action<Shape> shapeAct= shape=>shape.Draw();
	ProcessShapes(shapeAct);            //Метод ждет произвольный тип в делегат, но можно передать и базовый.


*** Многопоточность:
    Все стандартные коллекции не потокобезопасны: при записи.
	BlockingCollection<T>:  
	     * сценарий producer-consumer.
		 * поддерживает синхронные и асинхронные операции.
		 Старая коллекция, сейчас лутчше использовать Chanel<T>	 !!! 
	System.Collections.Concurrent
	     * отсутствует ConcurrentList<T>
		 
	Чтение из ConcurrentDictionary:
	//Приходится считать хэш функцию ключа 2 раза.
	if(concurrentDict.ContainsKey(key))
	{
	   var value= concurrentDict[key];
	}
	//считаем хэш ключа 1 раз. ВЕРНОЕ РЕШЕНИЕ.
	if(concurrentDict.TryGetValue(key, out var value)) 
	{
       //Do something with 'value'	
	}
	
	Обновление ConcurrentDictionary:
		Хотим обновить если значение равно 10
		1 Thread:
		if(concurrentDict[key] == 10)
		{
		   concurrentDict[key]= 20;
		}
		2 Thread:
		if(concurrentDict[key] == 10)
		{
		   concurrentDict[key]= 30;
		}
		1 поток изменяет значение по 1 условию, 2 поток по другому условию, 3 поток может вообще удалить ключ.
		нужно использовать:
		if(concurrentDict.TryUpdate(key, 20, 10))
		{
		  //Do something with 'value'	
		}
		т.е. единственный способ это проверять текущее значение перед обновлением.
	
	
	По возможности использовать lock-free подход.
		ConcurrentDictionary- lock-free на чтение.
		ConcurrentBag - читатель/писатель() - если не нужен доступ по индексу и не важен порядок добавления элементов.
		Queue/Stack - полностью lock-free.
	   
		 
		 
		 
*** Для внутренних нужд класса используем конкретные коллекции List<T>(), Dictionary<Tkey, Tval>(), чтобы небыло каста к интерфейсам.
    Все должно быть просто и понятно, никаких общих сценариев.


*** В публичные Api:
       ** принимаем интерфейсы коллекций в функцию.
	      Если не нужно изменять:
	          IEnumerable<T> - редко, только когда нужно 1 раз интерировать, т.к. приходится кастить через ToList()
		      IReadOnlyCollection<T> - итерирование + количество.
			  IReadOnlyList<T> - доступ по индексу.	
		  Если нужно изменять:
              IList<T>		
			
		** Возвращаемое значение из функции
          	ReadOnlyCollection<T>
            Collection<T> - можно наследоваться от Collection<T>, для того чтобы правильно назвать возвращаемую коллекцию,
			                т.е. не просто Collection<int>, а OrdersCollection например.
			
			
	   ** list.ToList() использовать правильнее чем list.ToArray(), т.к. ToArray вызывает доп. аллокацию.
	   
	   ** возвращаем специфические коллекции
	         